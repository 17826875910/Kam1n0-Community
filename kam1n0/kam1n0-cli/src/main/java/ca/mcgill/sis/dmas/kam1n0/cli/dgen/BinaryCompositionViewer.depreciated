/*******************************************************************************
 * Copyright 2017 McGill University All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package ca.mcgill.sis.dmas.kam1n0._deamon.cli.dgen;

import static ca.mcgill.sis.dmas.env.Environment.configuration;

import java.io.File;
import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ca.mcgill.sis.dmas.env.ArgumentParser;
import ca.mcgill.sis.dmas.env.CLIFunction;
import ca.mcgill.sis.dmas.env.Environment;
import ca.mcgill.sis.dmas.env.ArgumentParser.OpType;
import ca.mcgill.sis.dmas.env.ArgumentParser.Option;
import ca.mcgill.sis.dmas.kam1n0._deamon.service.BinaryAnalysisProcedureCompositionAnalysis;
import ca.mcgill.sis.dmas.kam1n0._deamon.service.TransferableBrowsableCloneUnit;
import ca.mcgill.sis.dmas.kam1n0.framework.scheduling.LocalJobProgress;
import ca.mcgill.sis.dmas.kam1n0.framework.scheduling.LocalJobScheduler;
import ca.mcgill.sis.dmas.kam1n0.www.WebServer;

public class BinaryCompositionViewer extends CLIFunction {
	private static Logger logger = LoggerFactory.getLogger(BinaryCompositionViewer.class);

	private ArgumentParser parser = ArgumentParser.create("browse");

	private Option op3 = parser.addOption("rf", OpType.File, false,
			"the Kam1n0-generated binary composition file.");

	public void process(String[] args) throws Exception {
		if (!parser.parse(args)) {
			return;
		}

		File resultFile = op3.getValue();

		try {

			Environment.jobScheduler = new LocalJobScheduler(configuration.api.cacheTimeOutInMinute,
					configuration.api.cacheSize);

			LocalJobProgress progress = new LocalJobProgress(0, null);
			progress.result = TransferableBrowsableCloneUnit.loadOrCreateNew(resultFile);
			progress.complete();

			Environment.jobScheduler.addCompletedProgress("tmp", BinaryAnalysisProcedureCompositionAnalysis
					.getJobName(BinaryAnalysisProcedureCompositionAnalysis.class), progress);

			WebServer webServer = WebServer.newWebServiceCLI(Environment.PATH_JAR + "\\www");

			webServer.start();
			webServer.popPage("BinaryCompositionAnalysis.html");

			Scanner scanner = new Scanner(System.in);
			logger.info("Press ENTER to shutdown the services");
			scanner.nextLine();
			scanner.close();

			webServer.stop();

		} catch (Exception e) {
			logger.error("Failed to browse data.. see following errors:", e);
		}
		logger.info("Finished.");
	}

	@Override
	public ArgumentParser getParser() {
		return parser;
	}

	@Override
	public String getDescription() {
		return "Browse existing binary composition analysis file.";
	}

	@Override
	public String getCode() {
		return "brw-cmp";
	}
	
	@Override
	public String getCategory() {
		return  "deamon operation";
	}
}
