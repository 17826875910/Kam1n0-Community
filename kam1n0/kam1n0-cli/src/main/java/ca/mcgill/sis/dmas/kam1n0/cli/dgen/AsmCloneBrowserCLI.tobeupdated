/*******************************************************************************
 * Copyright 2017 McGill University All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package ca.mcgill.sis.dmas.kam1n0._deamon.cli.dgen;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microsoft.z3.Context;

import ca.mcgill.sis.dmas.env.ArgumentParser;
import ca.mcgill.sis.dmas.env.Environment;
import ca.mcgill.sis.dmas.env.ArgumentParser.OpType;
import ca.mcgill.sis.dmas.env.ArgumentParser.Option;
import ca.mcgill.sis.dmas.io.collection.EntryTriplet;
import ca.mcgill.sis.dmas.io.file.DmasFileOperations;
import ca.mcgill.sis.dmas.kam1n0._deamon.CLIFunction;
import ca.mcgill.sis.dmas.kam1n0._deamon.cli.dgen.SrcFunctionUtils.SrcFunctions;
import ca.mcgill.sis.dmas.kam1n0._deamon.cli.dgen.processing.Configuration;
import ca.mcgill.sis.dmas.kam1n0.app.adata.FunctionDataUnit;
import ca.mcgill.sis.dmas.kam1n0.app.clone.adata.FunctionCloneDataUnit;
import ca.mcgill.sis.dmas.kam1n0.app.clone.adata.FunctionCloneDetectionResultForWeb;
import ca.mcgill.sis.dmas.kam1n0.app.clone.adata.FunctionCloneEntryForWeb;
import ca.mcgill.sis.dmas.kam1n0.framework.disassembly.BinarySurrogate;
import ca.mcgill.sis.dmas.kam1n0.framework.storage.Function;
import ca.mcgill.sis.dmas.kam1n0.problem.clone.FunctionCloneDetectionResultForCLI;
import ca.mcgill.sis.dmas.kam1n0.utils.src.SrcFunction;
import ca.mcgill.sis.dmas.kam1n0.www.WebServer;
import ca.mcgill.sis.dmas.res.KamResourceLoader;

public class AsmCloneBrowserCLI extends CLIFunction {
	private static Logger logger = LoggerFactory.getLogger(AsmCloneBrowserCLI.class);

	private ArgumentParser parser = ArgumentParser.create(AsmCloneBrowserCLI.class.getSimpleName());

	private Option op2 = parser.addOption("rf", OpType.File, false, "the clone detection result file.",
			new File("truth.json"));

	private Option op4 = parser.addOption("th", OpType.Double, false,
			"the upper threshold value for clones. (inclusive)", Double.MAX_VALUE);

	private Option op5 = parser.addOption("tl", OpType.Double, false,
			"the lower threshold value for clones. (inclusive)", 0.0);

	private Option opIn = parser.addOption("in", OpType.String, false,
			"input value for runing samples for symbolic mode (hex string long val).", "aaaaaaa");

	public void process(String[] args) throws Exception {
		if (!parser.parse(args)) {
			return;
		}

		FunctionCloneDetectionResultForCLI dr = null;
		Configuration conf = null;
		File resultFile = op2.getValue();

		dr = FunctionCloneDetectionResultForCLI.load(resultFile.getAbsolutePath());
		if (dr == null) {
			logger.error("Failed to load result file.");
			return;
		}

		conf = Configuration.load(dr.confFile);
		if (conf == null) {
			logger.error("Failed to load cofiguration file. ");
			return;
		}
		FunctionCloneDetectionResultForCLI tr = FunctionCloneDetectionResultForCLI.load(conf.getGroundTruthFileDir());
		Set<Long> tr_ids = tr.cloneMape.stream().flatMap(tp -> Arrays.asList(tp.value0, tp.value1).stream())
				.collect(Collectors.toSet());
		dr.cloneMape = dr.cloneMape.stream().filter(tp -> tr_ids.contains(tp.value0) && tr_ids.contains(tp.value1))
				.collect(Collectors.toCollection(ArrayList::new));

		File outDir = new File(conf.getAsmFolderDir());

		File srcFile = new File(conf.getSrcFuncFileDir());
		Double upper = op4.getValue();
		if (upper < 0) {
			logger.error("Invalid upper threshold value {}; setting to {};", upper, Double.MAX_VALUE);
		}
		Double lower = op5.getValue();
		if (lower < 0) {
			logger.error("Invalid lower threshold value {}; setting to {};", lower, 0);
		}

		try {

			logger.info("Loading assembly functions and source code functions..");

			HashMap<Long, SrcFunction> srcFunctionMap = null;
			if (srcFile.exists()) {
				srcFunctionMap = new HashMap<>();
				SrcFunctions srcFunctions = SrcFunctionUtils.getSrcFunctions(srcFile);
				for (SrcFunction srcFunction : srcFunctions) {
					srcFunctionMap.put(srcFunction.id, srcFunction);
				}
			}

			ArrayList<BinarySurrogate> binaries = new ArrayList<>();
			ArrayList<File> files = DmasFileOperations.select(outDir.getAbsolutePath(), DmasFileOperations.REGEX_ALL);
			for (File file : files) {
				try {
					binaries.add(BinarySurrogate.load(file));
				} catch (Exception e) {
					logger.error("Failed to load parsed asm code from file :" + file.getAbsolutePath(), e);
				}
			}

			HashMap<Long, SrcFunction> srcFMap = srcFunctionMap;
			List<Long> vids = dr.cloneMape.stream().flatMap(clone -> Arrays.asList(clone.value0, clone.value1).stream())
					.collect(Collectors.toList());
			Map<String, Function> funcMap = binaries.stream()
					.flatMap(bin -> bin.functions.stream().filter(func -> vids.contains(func.id)).peek(func -> {
						SrcFunction srcf = srcFMap.get(func.srcid);
						if (srcf != null)
							func.name = func.name + "_" + srcf.functionName;
						else if (func.srcName.length() > 0)
							func.name = func.name + "_" + func.srcName;
					}).map(func -> bin.toFunction(func)))
					.collect(Collectors.toMap(func -> Long.toString(func.functionId), func -> func));

			funcMap.values().forEach(func -> {
				SrcFunction srcf = srcFMap.get(func.srcId);
				if (srcf != null)
					func.functionName = func.functionName + "_" + srcf.functionName;
			});

			FunctionCloneDataUnit meta = buildCloneMetaData(dr, funcMap);

			long id = DatasetBrowserAPI.setPreparedData(meta, funcMap, srcFunctionMap, Environment.inSymbolicMode,
					Long.parseUnsignedLong(opIn.getValue(), 16));

			WebServer webServer = WebServer.newWebServiceCLI(Environment.PATH_JAR + "\\www");

			webServer.start();
			webServer.popPage("CloneBrowser.html?id=" + id);

			Scanner scanner = new Scanner(System.in);
			logger.info("Press ENTER to shutdown the services");
			scanner.nextLine();
			scanner.close();

			webServer.stop();

		} catch (Exception e) {
			logger.error("Failed to browse data.. see following errors:", e);
		}
		logger.info("Finished.");
	}

	@Override
	public ArgumentParser getParser() {
		return parser;
	}

	@Override
	public String getDescription() {
		return "Browse clone dataset.";
	}

	@Override
	public String getCode() {
		return "brw";
	}

	@Override
	public String getCategory() {
		return "dataset generation";
	}

	public static FunctionCloneDataUnit buildCloneMetaData(FunctionCloneDetectionResultForCLI cliResult,
			Map<String, Function> funcMap) {

		HashMap<Long, FunctionCloneDetectionResultForWeb> map = new HashMap<>();

		cliResult.cloneMape.stream()// swap first and second key
				.flatMap(clone -> Arrays.asList(new EntryTriplet<>(clone.value0, clone.value1, clone.value2), //
						new EntryTriplet<>(clone.value1, clone.value0, clone.value2))//
						.stream())//
				.forEach(clone -> {
					FunctionCloneDetectionResultForWeb result = map.get(clone.value0);
					if (result == null) {
						result = new FunctionCloneDetectionResultForWeb();
						Function func = funcMap.get(Long.toString(clone.value0));
						if (func == null) {
							logger.error("find a null function id {} in clone set... skipped", clone.value0);
							return;
						}
						result.function = new FunctionDataUnit(func, true);
						map.put(clone.value0, result);
					}
					Function func = funcMap.get(Long.toString(clone.value1));
					FunctionCloneEntryForWeb entry = new FunctionCloneEntryForWeb(new FunctionDataUnit(func, true),
							clone.value2, func.blockIds.size());
					result.clones.add(entry);
				});

		FunctionCloneDataUnit data = new FunctionCloneDataUnit();
		data.results = new ArrayList<>(map.values());
		data.generateCloneGraph();
		data.takenTime = Math.round(cliResult.timeIndex + cliResult.timeSearch);
		return data;
	}
}
